{"version":3,"file":"static/js/692.73d07273.chunk.js","mappings":"+LAEaA,E,QAAgBC,GAAAA,IAAH,kE,SCCbC,EAAS,WAClB,OACI,SAACF,EAAD,WACI,SAAC,KAAD,CACIG,MAAM,MACNC,YAAY,gB,0MCNtBC,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,IAAAA,IAAA,sCAAyCF,EAAzC,oBADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACoBJ,IAAAA,IAAA,gCAAmCF,EAAnC,kBAAoDM,EAApD,+CADpB,cACGH,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACoBN,IAAAA,IAAA,iBAAoBM,EAApB,oBAAkCR,EAAlC,oBADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAuBD,GAAvB,uFACoBN,IAAAA,IAAA,iBAAoBM,EAApB,4BAA0CR,EAA1C,oBADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA0BF,GAA1B,uFACoBN,IAAAA,IAAA,iBAAoBM,EAApB,4BAA0CR,EAA1C,2BADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAtBPF,IAAAA,SAAAA,QAAyB,gC,gLCDZS,EAAWf,EAAAA,GAAAA,IAAH,uEAKRgB,EAAYhB,EAAAA,GAAAA,IAAH,sKAYTiB,EAAOjB,EAAAA,GAAAA,GAAH,4DAKJkB,EAAYlB,EAAAA,GAAAA,EAAH,6C,SCpBTmB,EAAW,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGtB,OACI,SAACL,EAAD,WACI,SAACE,EAAD,UACKG,EAAOC,KAAI,YAA4C,IAAzCT,EAAwC,EAAxCA,GAAIU,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAChC,OACI,yBACI,UAACR,EAAD,YACI,gBACIS,IAAKD,EAAY,UAVlC,mCAUkC,OAAeA,GAAf,UAAmCE,GACpDC,IAAKJ,KAET,4BACI,SAACL,EAAD,UAAYK,KACZ,uCAAeD,YARlBV,W,UCNpBgB,EAAW,WACpB,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,2FACID,GAAW,GADf,mBAG2BrB,EAAAA,EAAAA,IAAQgB,GAHnC,OAGcrB,EAHd,OAIQwB,EAAUxB,EAAK4B,MAJvB,gDAMQC,QAAQC,IAAI,KAAMC,SAN1B,yBAQQL,GAAW,GARnB,6EADY,uBAAC,WAAD,wBAaZM,KAED,CAACX,KAIA,gCACKI,IAAW,SAAChC,EAAA,EAAD,IACXmB,IAAU,SAACD,EAAD,CAAUC,OAAQA,S","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/moviesApi.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","views/CastView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  width: fit-content;\n  margin: 0 auto;\n`;","import { RotatingLines } from  'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nexport const Loader = () => {\n    return (\n        <LoaderWrapper>\n            <RotatingLines \n                width=\"100\" \n                strokeColor=\"#a7a7a7\"\n            />\n        </LoaderWrapper>\n    );\n}; ","import axios from 'axios';\n\nconst API_KEY = 'b9577cb72f619941d2b4ff770ab268ce';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function getTrendingMovies() {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nexport async function getSearchMovie(query) {\n    const response = await axios.get(`/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`);\n    return response.data;\n};\n\nexport async function getMovieDetails(id) {\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nexport async function getCast(id) {\n    const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n};\n\nexport async function getReviews(id) {\n    const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n};","import styled from 'styled-components';\n\nexport const CastWrap = styled.div`\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const ActorCard = styled.div`\n  display: flex;\n  margin-bottom: 10px;\n  img {\n    margin-right: 20px;\n  }\n  p {\n    margin-bottom: 10px;\n    margin-top: 10px;\n  }\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const ActorName = styled.p`\n  font-weight: 500;\n`;","import propTypes from 'prop-types';\nimport NoImage from '../../images/NoImageAvailable.png';\nimport { CastWrap, List, ActorCard, ActorName } from './Cast.styled';\n\nexport const CastList = ({actors}) => {\n    const imgUrl = 'https://image.tmdb.org/t/p/w200';\n\n    return (\n        <CastWrap>\n            <List>\n                {actors.map(({ id, character, name, profile_path }) => {\n                    return (\n                        <li key={id}>\n                            <ActorCard>\n                                <img\n                                    src={profile_path ? `${imgUrl}${profile_path}` : `${NoImage}`}\n                                    alt={name}\n                                />\n                                <div>\n                                    <ActorName>{name}</ActorName>\n                                    <p>Character: {character}</p>\n                                </div>\n                            </ActorCard>\n                        </li>\n                    )\n                })}\n            </List>\n        </CastWrap>\n    )\n};\n\nCastList.propTypes = {\n    actors: propTypes.arrayOf(propTypes.object).isRequired,\n}","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../services/moviesApi';\nimport { CastList } from 'components/Cast/Cast';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const CastView = () => {\n    const { moviesId } = useParams();\n    const [actors, setActors] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        async function fetchCast() {\n            setLoading(true);\n            try {\n                const data = await getCast(moviesId);\n                setActors(data.cast);\n            } catch (error) {\n                console.log(error.message);\n            } finally {\n                setLoading(false);\n            }\n        }\n\n        fetchCast();\n\n    }, [moviesId]);\n\n\n    return (\n        <>\n            {loading && <Loader />}\n            {actors && <CastList actors={actors} />}\n        </>\n    )\n}\n"],"names":["LoaderWrapper","styled","Loader","width","strokeColor","API_KEY","getTrendingMovies","axios","response","data","getSearchMovie","query","getMovieDetails","id","getCast","getReviews","CastWrap","ActorCard","List","ActorName","CastList","actors","map","character","name","profile_path","src","NoImage","alt","CastView","moviesId","useParams","useState","setActors","loading","setLoading","useEffect","cast","console","log","message","fetchCast"],"sourceRoot":""}